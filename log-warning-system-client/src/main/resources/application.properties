# log\u914D\u7F6E
#\u8981\u68C0\u6D4B\u7684\u65E5\u5FD7\u7684\u8DEF\u5F84\uFF0C\u5982\u679C\u4E3ALinux\u7CFB\u7EDF\uFF0C\u8BF7\u4F7F\u7528Unix\u8DEF\u5F84\u65B9\u5F0F
log.path=D:\\gitProject\\log-warning-system
# \u8981\u68C0\u6D4B\u7684\u65E5\u5FD7\u6587\u4EF6\u540D\uFF0C\u5982\u679C\u6709\u591A\u4E2A\u65E5\u5FD7\u6587\u4EF6\uFF0C\u8BF7\u4F7F\u7528;\u8FDB\u884C\u5206\u5272
log.filename=mylog.txt
# \u65E5\u5FD7\u6587\u4EF6\u7684\u7F16\u7801\u683C\u5F0F
log.fileEncoding=UTF-8
# \u670D\u52A1\u914D\u7F6E
# \u68C0\u6D4B\u7684\u670D\u52A1\u540D\u79F0\uFF0C\u547D\u540D\u5C3D\u91CF\u4E0D\u8981\u76F8\u540C\u3002
spring.application.name=nginx1
server.name=${spring.application.name}
# \u670D\u52A1\u7684IP\u5730\u5740\uFF08\u6B64IP\u5730\u5740\u7528\u6765\u8FDB\u884C\u53EF\u53EF\u89C6\u5316\uFF0C\u586B\u5199\u771F\u5B9E\u670D\u52A1\u7684IP\u5730\u5740\u548C\u7AEF\u53E3\uFF09
server.host=127.0.0.1
# \u670D\u52A1\u7684\u7AEF\u53E3
server.port=8887
# \u670D\u52A1\u7684\u5730\u7406\u4F4D\u7F6E
server.location=\u5C71\u897F\u7701\u592A\u539F\u5E02\u4E2D\u5317\u5927\u5B66
# \u670D\u52A1\u63CF\u8FF0
server.description=nginx\u670D\u52A1\uFF0C\u6D4B\u8BD5\u4F7F\u7528
# nacos\u914D\u7F6E
#spring.cloud.nacos.config.server-addr=kklll.cn:8848
#spring.cloud.nacos.config.group=client
#spring.cloud.nacos.discovery.server-addr=kklll.cn:8848
#spring.cloud.nacos.discovery.group=client
# Zookeeper\u914D\u7F6E
zk.address=kklll.cn:2181
zk.timeout=30000
zk.rootNode=/log-service
#kafka
kafka.topic=test
spring.kafka.bootstrap-servers=kklll.cn:9092,kklll.cn:9093,kklll.cn:9094
#spring.kafka.producer.retries=0
# \u6BCF\u6B21\u6279\u91CF\u53D1\u9001\u6D88\u606F\u7684\u6570\u91CF,produce\u79EF\u7D2F\u5230\u4E00\u5B9A\u6570\u636E\uFF0C\u4E00\u6B21\u53D1\u9001
#spring.kafka.producer.batch-size=16384
# produce\u79EF\u7D2F\u6570\u636E\u4E00\u6B21\u53D1\u9001\uFF0C\u7F13\u5B58\u5927\u5C0F\u8FBE\u5230buffer.memory\u5C31\u53D1\u9001\u6570\u636E
#spring.kafka.producer.buffer-memory=33554432
#procedure\u8981\u6C42leader\u5728\u8003\u8651\u5B8C\u6210\u8BF7\u6C42\u4E4B\u524D\u6536\u5230\u7684\u786E\u8BA4\u6570\uFF0C\u7528\u4E8E\u63A7\u5236\u53D1\u9001\u8BB0\u5F55\u5728\u670D\u52A1\u7AEF\u7684\u6301\u4E45\u5316\uFF0C\u5176\u503C\u53EF\u4EE5\u4E3A\u5982\u4E0B\uFF1A
#acks = 0 \u5982\u679C\u8BBE\u7F6E\u4E3A\u96F6\uFF0C\u5219\u751F\u4EA7\u8005\u5C06\u4E0D\u4F1A\u7B49\u5F85\u6765\u81EA\u670D\u52A1\u5668\u7684\u4EFB\u4F55\u786E\u8BA4\uFF0C\u8BE5\u8BB0\u5F55\u5C06\u7ACB\u5373\u6DFB\u52A0\u5230\u5957\u63A5\u5B57\u7F13\u51B2\u533A\u5E76\u89C6\u4E3A\u5DF2\u53D1\u9001\u3002\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u65E0\u6CD5\u4FDD\u8BC1\u670D\u52A1\u5668\u5DF2\u6536\u5230\u8BB0\u5F55\uFF0C\u5E76\u4E14\u91CD\u8BD5\u914D\u7F6E\u5C06\u4E0D\u4F1A\u751F\u6548\uFF08\u56E0\u4E3A\u5BA2\u6237\u7AEF\u901A\u5E38\u4E0D\u4F1A\u77E5\u9053\u4EFB\u4F55\u6545\u969C\uFF09\uFF0C\u4E3A\u6BCF\u6761\u8BB0\u5F55\u8FD4\u56DE\u7684\u504F\u79FB\u91CF\u59CB\u7EC8\u8BBE\u7F6E\u4E3A-1\u3002
#acks = 1 \u8FD9\u610F\u5473\u7740leader\u4F1A\u5C06\u8BB0\u5F55\u5199\u5165\u5176\u672C\u5730\u65E5\u5FD7\uFF0C\u4F46\u65E0\u9700\u7B49\u5F85\u6240\u6709\u526F\u672C\u670D\u52A1\u5668\u7684\u5B8C\u5168\u786E\u8BA4\u5373\u53EF\u505A\u51FA\u56DE\u5E94\uFF0C\u5728\u8FD9\u79CD\u60C5\u51B5\u4E0B\uFF0C\u5982\u679Cleader\u5728\u786E\u8BA4\u8BB0\u5F55\u540E\u7ACB\u5373\u5931\u8D25\uFF0C\u4F46\u5728\u5C06\u6570\u636E\u590D\u5236\u5230\u6240\u6709\u7684\u526F\u672C\u670D\u52A1\u5668\u4E4B\u524D\uFF0C\u5219\u8BB0\u5F55\u5C06\u4F1A\u4E22\u5931\u3002
#acks = all \u8FD9\u610F\u5473\u7740leader\u5C06\u7B49\u5F85\u5B8C\u6574\u7684\u540C\u6B65\u526F\u672C\u96C6\u4EE5\u786E\u8BA4\u8BB0\u5F55\uFF0C\u8FD9\u4FDD\u8BC1\u4E86\u53EA\u8981\u81F3\u5C11\u4E00\u4E2A\u540C\u6B65\u526F\u672C\u670D\u52A1\u5668\u4ECD\u7136\u5B58\u6D3B\uFF0C\u8BB0\u5F55\u5C31\u4E0D\u4F1A\u4E22\u5931\uFF0C\u8FD9\u662F\u6700\u5F3A\u6709\u529B\u7684\u4FDD\u8BC1\uFF0C\u8FD9\u76F8\u5F53\u4E8Eacks = -1\u7684\u8BBE\u7F6E\u3002
#\u53EF\u4EE5\u8BBE\u7F6E\u7684\u503C\u4E3A\uFF1Aall, -1, 0, 1
spring.kafka.producer.acks=1
# \u6307\u5B9A\u6D88\u606Fkey\u548C\u6D88\u606F\u4F53\u7684\u7F16\u89E3\u7801\u65B9\u5F0F
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
##=============== consumer  =======================# \u6307\u5B9A\u9ED8\u8BA4\u6D88\u8D39\u8005group id
spring.kafka.consumer.group-id=test
#spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=true
#spring.kafka.consumer.auto-commit-interval=100


#\u672C\u5730log
logging.level.root=WARN
logging.file.path=.